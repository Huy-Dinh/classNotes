SECOND WEEK (16/10) (FPGA)
{
	FPGA{
		- Logic cells: lookup table through a D flip flop, output is selected by a multiplexer
		- Hard IP/DSP blocks{
			- readily implemented logic blocks inside an FPGA
			- Low power consumption + high performance
		}
		- Uses phase locked loops (PLL) to boost the frequency of the oscillator to prevent possible RF effects on longer wires outside of the chip while still maintaining processing frequency.
		- Is not "programmed" but "designed" through Hardware Description Languages (HDL)
		- VOLATILE: as it is based off SRAM, an FPGA loses its configuration once power is off
	}
	
	Verilog{
		- Refer to testVerilog.v
		- IMPORTANT: separate routing from clock, otherwise there would be a loss of resources
	}
}

SECOND WEEK (19/10) (Verilog)
{
	Load/store architecture (used in most RISCs){
		- 5 cycles: Instruction fetch - decode - execute - memory access - writeback
	}
	Verilog{
		- reg: variables{
			reg c;
			wire a, b;
			.
			.
			.
			always @* // To simplify, use "always@(posedge clk)" (clocked operation)  
				c = a & b; 
		}
		- wire: signal, can be used with "assign", (say, assign c = a & b){
			wire a, b, c;
			.
			.
			.
			assign c = a & b;
		}
		- NAME THE FILE IDENTICAL TO THE MODULE
		- DISTINGUISH <=  (sequential/non-blocking) AND = (combinational/blocking)
	}
}

THIRD WEEK (23/10)
{
	Things going wrong without clock{
		Examples:
			- Combinational loop (Adder)
	}
	FPGA{
		- Pin direction mapped onto IO cell
	}
	Simulation{
		- Functional Simuation: do not take into account the delay.
		- Netlist simulation: consider the delay.
	}
	The reason for having the duty_cycle 1 bit longer than the PWM counter is to make up for the fact that the highest voltage is absent when counting from 0 to max(pwm counter)
}

THIRD WEEK (26/10)
{
	PWM{
		PWM frequency ~ (counter width & counter update rate (time base generator))
		T(pwm) should be a result of 2^N to be meaningful (without the time value offset)
		other structure for PWM{
			use 2 PWM with fixed f and duty cycle, the 2nd one with a slightly longer T than the 1st, XOR them together
		}
	}
	Triangular counter{
		use the MSB as an extra bit for direction controlling
		if (MSB)
		{
			return inversed
		}
		else
		{
			return 
		}
	}
}

FIFTH WEEK (6/11) (Digital Function Generation)
{
	unsigned sawtooth up/down with/without offset (ezpz)
	signed sawtooth{
		use signed variables{
			type cast using "$" {
				$signal(...)
			}
			CODE_SAMPLE{
			output reg signed output;
			....
			reg signed [3:0] q;
			}
		}		
	}
	increasing slopes of sawtooth counters{
		- increase the delta by 1s{
			for example +2 instead of +1 for every clock
		}
		- use fractional{
			extra less significant bits in the accumulator value to represent the numbers behind the decimal point
		}
	}
	
	DDFS (Direct Digital Frequency Synthesis){
		Increase frequency: multiples of increment values;
		Decrease frequency: take into account the highest 8 (or COUNTER_LENGTH) bits only (halve the frequency for every bits neglected)
	}
}

FIFTH WEEK(9/11)
{
	From accumulator to LUT => phase to amplitude conversion{
		accumulator creates index (phase) looked up on the LUT which outputs amplitude
		number of accumulator bits ~= phase resolution (say, 360deg/256)
		fo = (FTW * f)/(2^n)
		f = system clock
		fo = output frequency
		n = number of bits (Will not change when you halve the frequency by adding a fractional bit)
		halving the frequency by adding bits => increase the frequency resolution
	}
	EXERCISE{
		5A{
			- Sweep: changes frequency overtime.
			-  
		}
		Amplitude modulation: add a multiplier after the LUT
		Frequency modulation: modify the increment value (Frequency tuning word)
		Phase modulation: use a multiplexer to select the phase offset constant in the Adder before the LUT (between the  Reg and the LUT)
	}
}